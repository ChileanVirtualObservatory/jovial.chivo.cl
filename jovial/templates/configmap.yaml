apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jovial.fullname" . }}-config
  labels:
    app: {{ template "jovial.name" . }}
    chart: {{ template "jovial.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  JOVIAL_config.py: |
    import socket
    import re

    config = get_config()
    # Since helm translates 'True' to 'true' and 'False' to 'false' we need this so we don't get python 'NameErrors'
    false = False
    true = True

    # JupyterHub Settings ----------------------------------------------------------

    config.JupyterHub.authenticator_class = 'ldapauthenticator.LDAPAuthenticator'
    config.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    config.JupyterHub.extra_log_file = '/var/log/jupyterhub' #TODO: This setting was deprecated?
    config.JupyterHub.ip = '0.0.0.0'
    config.JupyterHub.hub_ip = '0.0.0.0'
    config.JupyterHub.confirm_no_ssl = True
    config.JupyterHub.cleanup_servers = False #TODO: Test this and add option in values.yaml

    # LDAP Settings ----------------------------------------------------------------

    config.LDAPAuthenticator.server_address = '{{ .Values.users.ldap.address }}'
    config.LDAPAuthenticator.server_port = {{ .Values.users.ldap.port }}
    config.LDAPAuthenticator.use_ssl = {{ .Values.users.ldap.useSSL }}
    config.LDAPAuthenticator.bind_dn_template = '{{ .Values.users.ldap.dn }}'
    config.PAMAuthenticator.open_sessions = False

    # KubeSpawner Settings ---------------------------------------------------------

    config.KubeSpawner.namespace = '{{ .Release.Namespace }}'
    config.KubeSpawner.start_timeout = {{ .Values.hub.timeout }}
    config.KubeSpawner.pod_name_template = '{{ template "jovial.fullname" . }}-jovial-{username}'
    config.KubeSpawner.singleuser_image_spec = '{{ .Values.users.container.image }}'
    config.KubeSpawner.singleuser_image_pull_policy = 'Always'
    config.KubeSpawner.hub_connect_ip = '{{ template "jovial.fullname" . }}-internal.{{ .Release.Namespace }}.svc.{{ .Values.k8s.domain }}'
    config.KubeSpawner.environment = {
            'HOME': lambda spawner: '/home/' + str(spawner.user.name),
            'USER': lambda spawner: spawner.user.name,
            'NOTEBOOK_DIR': lambda spawner: '/home/'+ str(spawner.user.name)
    }
    config.KubeSpawner.volume_mounts = [{
        'name': 'home-{username}',
        'mountPath': '/home/{username}'
    }]
    config.KubeSpawner.volumes = [{
        'name': 'home-{username}',
        'nfs': {
          'server': '{{ .Values.users.home.nfs.server }}',
          'path': '{{ .Values.users.home.nfs.path }}/{username}'
        }
    }]

    def getLocalSpawnerIP():
      sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
      sock.connect(('kubernetes.default.svc.cluster.local', 443))
      return sock.getsockname()[0]

    def modifyPodHook(spawner, pod):
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: Spawner pod internal type: ' + str(type(pod)))
        spawner.log.info('[modifyPodHook]: Replacing \'{jovial-username}\' with \'' + str(spawner.user.name) + '\' in the \'initContainers\' section of the pod')
      container = pod.spec.init_containers[0]
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: initContainer type: ' + str(type(container)))
        spawner.log.info('[modifyPodHook]: initContainer Before: ' + str(container))
      container['volumeMounts'][0]['name'] = container['volumeMounts'][0]['name'].replace('{jovial-username}', spawner.user.name)
      container['volumeMounts'][0]['mountPath'] = container['volumeMounts'][0]['mountPath'].replace('{jovial-username}', spawner.user.name)
      container['env'][0]['value'] = container['env'][0]['value'].replace('{jovial-username}', spawner.user.name)
      container['env'][1]['value'] = container['env'][1]['value'].replace('{jovial-username}', spawner.user.name)
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: initContainer After: ' + str(container))
      containerEnv = pod.spec.containers[0].env
      index = -1
      for i, var in enumerate(containerEnv):
         if var.name == 'JUPYTERHUB_API_URL':
            index = i
            break
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: JUPYTERHUB_API_URL Before: ' + str(containerEnv[index].value))
      pattern = re.compile('http:\/\/(.*):8081\/hub\/api')
      result = pattern.search(containerEnv[index].value)
      to_replace = result.group(1)
      spawner_ip = getLocalSpawnerIP()
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: Replacing ' + to_replace + ' with ' + spawner_ip)
      containerEnv[index].value = containerEnv[index].value.replace(to_replace, spawner_ip)
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: JUPYTERHUB_API_URL After: ' + str(containerEnv[index].value))
      extra_args = dict()
      extra_args['name'] = 'JOVIAL_NOTEBOOK_EXTRA_ARGS'
      extra_args['value'] = '{{ .Values.users.container.extraArgs }}' #TODO: Fix this
      containerEnv.append(extra_args)
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: ENV: ' + str(containerEnv))
      pod.spec.containers[0].working_dir = '/home/' + spawner.user.name
      return pod

    config.KubeSpawner.modify_pod_hook = modifyPodHook
