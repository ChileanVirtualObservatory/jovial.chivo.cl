apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jovial.fullname" . }}-config
  labels:
    app: {{ template "jovial.name" . }}
    chart: {{ template "jovial.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  JOVIAL_config.py: |
    import socket, re, ssl, ldap3

    config = get_config()
    # Since helm translates 'True' to 'true' and 'False' to 'false' we need this so we don't get python 'NameError's
    false = False
    true = True

    # JupyterHub Settings ----------------------------------------------------------

    config.JupyterHub.authenticator_class = 'ldapauthenticator.LDAPAuthenticator'
    config.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    config.JupyterHub.extra_log_file = '/var/log/jupyterhub' #TODO: This setting was deprecated?
    config.JupyterHub.ip = '0.0.0.0'
    config.JupyterHub.hub_ip = '0.0.0.0'
    config.JupyterHub.confirm_no_ssl = True
    config.JupyterHub.cleanup_servers = {{ .Values.hub.cleanupServers }}
    config.JupyterHub.admin_access = {{ .Values.hub.adminAccess }}

    # LDAP Settings ----------------------------------------------------------------

    config.Authenticator.admin_users = {{ .Values.hub.adminUsers | quote }}
    config.LDAPAuthenticator.server_address = '{{ .Values.users.ldap.address }}'
    config.LDAPAuthenticator.server_port = {{ .Values.users.ldap.port }}
    {{if .Values.users.ldap.ssl.enabled}}
    config.LDAPAuthenticator.use_ssl = true
    config.LDAPAuthenticator.server_ca_file = '/certs/ca.pem'
    config.LDAPAuthenticator.client_certificate_file = '/certs/client.pem'
    config.LDAPAuthenticator.client_key_file = '/certs/client.key'
    {{else}}
    config.LDAPAuthenticator.use_ssl = false
    {{end}}
    config.LDAPAuthenticator.bind_dn_template = '{{ .Values.users.ldap.dn }}'
    config.PAMAuthenticator.open_sessions = False

    # KubeSpawner Settings ---------------------------------------------------------

    config.KubeSpawner.namespace = '{{ .Release.Namespace }}'
    config.KubeSpawner.start_timeout = {{ .Values.hub.timeout }}
    config.KubeSpawner.pod_name_template = '{{ template "jovial.fullname" . }}-{username}'
    config.KubeSpawner.singleuser_image_spec = '{{ .Values.users.container.image }}'
    config.KubeSpawner.singleuser_image_pull_policy = 'Always'
    config.KubeSpawner.hub_connect_ip = '{{ template "jovial.fullname" . }}-internal.{{ .Release.Namespace }}.svc.{{ .Values.k8s.domain }}'
    config.KubeSpawner.environment = {
            'HOME': lambda spawner: '/home/' + str(spawner.user.name),
            'USER': lambda spawner: spawner.user.name,
            'NOTEBOOK_DIR': lambda spawner: '/home/'+ str(spawner.user.name)
    }
    config.KubeSpawner.volume_mounts = [{
        'name': 'home-{username}',
        'mountPath': '/home/{username}'
    }]
    config.KubeSpawner.volumes = [{
        'name': 'home-{username}',
        'nfs': {
          'server': '{{ .Values.users.home.nfs.server }}',
          'path': '{{ .Values.users.home.nfs.path }}/{username}'
        }
    }]
    config.KubeSpawner.singleuser_init_containers = [{
        'name': 'init',
        'image': '{{ .Values.users.initContainer.image }}',
        'imagePullPolicy': 'Always',
        'volumeMounts': [{
            'name': 'home-{username}',
            'mountPath': '/home/{username}'
        }],
        'env': [
            {'name': 'USER', 'value': '{username}'},
            {'name': 'HOME', 'value': '/home/{username}'}
        ]
    }]
    {{ if .Values.users.nodeSelector.enabled }}
    config.KubeSpawner.node_selector = {'beta.kubernetes.io/instance-type': {{ .Values.users.nodeSelector.instanceType | quote }}}
    {{ end }}
    {{ if .Values.hub.instanceTypes.enabled }}
    config.KubeSpawner.profile_list = [
      {
        'display_name': 'Small instance: {{ .Values.hub.instanceTypes.small.memory }} memory, {{ .Values.hub.instanceTypes.small.cpu }} core',
        'default': True,
        'kubespawner_override': {
          'mem_limit': '{{ .Values.hub.instanceTypes.small.memory }}',
          'cpu_limit': {{ .Values.hub.instanceTypes.small.cpu }}
        }
      },
      {
        'display_name': 'Medium instance: {{ .Values.hub.instanceTypes.medium.memory }} memory, {{ .Values.hub.instanceTypes.medium.cpu }} core',
        'kubespawner_override': {
          'mem_limit': '{{ .Values.hub.instanceTypes.medium.memory }}',
          'cpu_limit': {{ .Values.hub.instanceTypes.medium.cpu }}
        }
      },
      {
        'display_name': 'Large instance: {{ .Values.hub.instanceTypes.large.memory }} memory, {{ .Values.hub.instanceTypes.large.cpu }} core',
        'kubespawner_override': {
          'mem_limit': '{{ .Values.hub.instanceTypes.large.memory }}',
          'cpu_limit': {{ .Values.hub.instanceTypes.large.cpu }}
        }
      }
    ]
    {{ end }}

    def modifyPodHook(spawner, pod):
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: Spawner pod internal type: ' + str(type(pod)))
      containerEnv = pod.spec.containers[0].env
      index = -1
      for i, var in enumerate(containerEnv):
         if var.name == 'JUPYTERHUB_API_URL':
            index = i
            break
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: JUPYTERHUB_API_URL Before: ' + str(containerEnv[index].value))
      pattern = re.compile('http:\/\/(.*):{{ .Values.k8s.deploy.ports.rest }}\/hub\/api')
      result = pattern.search(containerEnv[index].value)
      to_replace = result.group(1)
      spawner_ip = '{{ template "jovial.fullname" . }}-internal.{{ .Release.Namespace }}.svc.{{ .Values.k8s.domain }}'
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: Replacing ' + to_replace + ' with ' + spawner_ip)
      containerEnv[index].value = containerEnv[index].value.replace(to_replace, spawner_ip)
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: JUPYTERHUB_API_URL After: ' + str(containerEnv[index].value))
      containerExtraArgs = list()
      extra_args = dict()
      extra_args['name'] = 'JOVIAL_NOTEBOOK_EXTRA_ARGS'
      extra_args['value'] = "--NotebookApp.default_url={{ .Values.hub.defaultURL }} {{ .Values.users.container.extraArgs }}"
      containerExtraArgs.append(extra_args)
      index = -1
      for i, var in enumerate(containerEnv):
         if var.name == 'USER':
            index = i
            break
      username = containerEnv[index].value
      {{if .Values.users.ldap.ssl.enabled}}
      tls = ldap3.Tls(local_private_key_file='/certs/client.key', local_certificate_file='/certs/client.pem', ca_certs_file='/certs/ca.pem', validate=ssl.CERT_REQUIRED)
      server = ldap3.Server('{{ .Values.users.ldap.address }}', port={{ .Values.users.ldap.port }}, use_ssl=True, tls=tls)
      {{else}}
      server = ldap3.Server('{{ .Values.users.ldap.address }}', port={{ .Values.users.ldap.port }}, use_ssl=False)
      {{end}}
      conn = ldap3.Connection(server, auto_bind=True)
      conn.search('{{ .Values.users.ldap.dn }}'.replace('{username}', username), '(uid=*)', attributes=['uidNumber', 'gidNumber'])
      result = conn.entries[0]
      useruid = dict()
      useruid['name'] = 'JOVIAL_NOTEBOOK_USER_UID'
      useruid['value'] = str(result.uidNumber)
      containerExtraArgs.append(useruid)
      usergid = dict()
      usergid['name'] = 'JOVIAL_NOTEBOOK_USER_GID'
      usergid['value'] = str(result.gidNumber)
      containerExtraArgs.append(usergid)
      containerEnv.extend(containerExtraArgs)
      if {{ .Values.hub.debug }}:
        spawner.log.info('[modifyPodHook]: ENV: ' + str(containerEnv))
      pod.spec.containers[0].working_dir = '/home/' + spawner.user.name
      return pod

    config.KubeSpawner.modify_pod_hook = modifyPodHook
